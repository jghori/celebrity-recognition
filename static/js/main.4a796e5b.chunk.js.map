{"version":3,"sources":["components/Logo/brain.png","components/Navigation/Navigation.js","components/Logo/Logo.js","components/ImageLinkForm/ImageLinkForm.js","components/FaceRecognition/FaceRecognition.js","components/Celebrity/Celebrity.js","components/Rank/Rank.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigation","style","display","justifyContent","className","Logo","options","max","height","width","paddingTop","alt","src","brain","ImageLinkForm","onInputChange","onButtonSubmit","type","onChange","onClick","FaceRecognition","imageURL","box","name","value","id","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","Celebrity","Rank","app","Clarifai","App","apiKey","particlesOptions","particles","number","density","enable","value_area","calculateFaceLocation","data","celebrity","outputs","regions","face","identity","concepts","clarifaiFace","region_info","bounding_box","image","document","getElementById","Number","console","log","left_col","top_row","right_col","bottom_row","displayFaceBox","setState","event","input","target","state","models","predict","CELEBRITY_MODEL","then","response","catch","err","params","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4a796e5b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/brain.10e6ab2d.png\";","import React from 'react';\n\nconst Navigation = () => {\n\treturn (\n\t\t<nav style= {{display: 'flex', justifyContent: 'flex-end'}}>\n\t\t\t<p className='f3 link dim black underline pa3 pointer'>Sign Out</p>\n\t\t</nav>\n\t);\n}\n\nexport default Navigation;","import React from 'react';\nimport Tilt from 'react-tilt';\nimport brain from './brain.png';\nimport './Logo.css';\n\nconst Logo = () => {\n\treturn (\n\t<div className='ma4 mt0'>\n\t\t<Tilt className=\"Tilt br2 shadow-2\" options={{ max : 55 }} style={{ height: 170, width: 170 }} >\n \t\t\t<div className=\"Tilt-inner pa3\">\n \t\t\t\t<img style={{paddingTop: '5px'}} alt='logo' src={brain}/>\n \t\t\t</div>\n\t\t</Tilt>\n\t</div>\n\n\t);\n}\n\nexport default Logo;","import React from 'react';\nimport './ImageLinkForm.css'\n\nconst ImageLinkForm = ({ onInputChange, onButtonSubmit}) => {\n\treturn (\n\n\t\t<div>\n\t\t\t<p className='f3 white'>\n\t\t\t\t{'This application predicts which celebrity is in the picture you submit and provides the accuracy'}\n\t\t\t\t<p className='f3 white'>\n\t\t\t\t{'1. Copy the image address of your desired picture'}\n\t\t\t\t</p>\n\t\t\t\t<p className='f3 white'>\n\t\t\t\t{'2. Paste the link in the form and press detect'}\n\t\t\t\t</p>\n\t\t\t\t<p className='f3 white'>\n\t\t\t\t{'3. Discover your celebrity!'}\n\t\t\t\t</p>\n\t\t\t</p>\n\n\t\t\t<div className='center'>\n\t\t\t\t<div className='form center pa4 br3 shadow-5'>\n\t\t\t\t<input className='f4 pa2 w-70 center' type='tex' onChange={onInputChange}/>\n\t\t\t\t<button \n\t\t\t\tclassName='w-30 grow f4 link ph3 pv2 dib white bg-black'\n\t\t\t\tonClick={onButtonSubmit}\n\t\t\t\t>Detect</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\n\n\t);\n}\n\nexport default ImageLinkForm;","import React from 'react';\nimport './FaceRecognition.css'\nconst FaceRecognition = ({ imageURL, box }) => {\n\treturn (\n\t\t<div className='center ma'>\n\n\t\t\t<div className='absolute mt3'>\n\t\t\t\t<div className='white f1'>\n\t\t\t\t\t{box.name}{'          '}{box.value}\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<img id='inputimage' alt='' src={imageURL} width='500px' height='auto'/>\n\t\t\t<div className='bounding-box' style= {{top: box.topRow, right: box.rightCol, bottom: box.bottomRow, left: box.leftCol}}></div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default FaceRecognition;","import React from 'react';\n\nconst Celebrity = ({ name, value }) => {\n\treturn (\n\t\t<div className='center ma'>\n\t\t\t\n\t\t</div>\n\t);\n}\n\nexport default Celebrity;","import React from 'react';\n\nconst Rank = () => {\n\treturn (\n\t\t<div>\n\t\t\t<div className='white f3'>\n\t\t\t{'Hello, welcome to'}\n\t\t\t</div>\n\t\t\t<div className='white f1'>\n\t\t\t{'Celebrity Recognition'}\n\t\t\t</div>\n\t\t</div>\t \n\t);\n}\n\nexport default Rank;","import React, { Component } from 'react';\nimport Navigation from './components/Navigation/Navigation';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Celebrity from './components/Celebrity/Celebrity';\nimport Rank from './components/Rank/Rank';\nimport './App.css';\nimport 'tachyons';\nimport Particles from 'react-particles-js';\nimport Clarifai from 'clarifai';\n\nconst app = new Clarifai.App({\n apiKey: '9d5c5a0b0a824f98a2883f9e990d097b'\n});\n\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 150,\n        density: {\n          enable: true,\n          value_area: 800\n        }\n      }\n  }\n}\n                 \nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      input: '',\n      imageURL: '',\n      box: {},\n      name: '',\n      value: ''\n    }\n  }\n\n\n  calculateFaceLocation = (data) => {\n    const celebrity = data.outputs[0].data.regions[0].data.face.identity.concepts[0];\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById('inputimage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    const name= celebrity.name;\n    const value= celebrity.value;\n    console.log(name, value);\n    return { \n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - (clarifaiFace.right_col * width),\n      bottomRow: height - (clarifaiFace.bottom_row * height),\n      name: celebrity.name,\n      value: celebrity.value\n    }\n  }\n\n\n  displayFaceBox = (box) => {\n    this.setState({box: box});\n  }\n\n  onInputChange = (event) => {\n    this.setState({input: event.target.value});\n  }\n\n  onButtonSubmit = () => {\n    this.setState({imageURL: this.state.input});\n    app.models\n      .predict(\n        Clarifai.CELEBRITY_MODEL, \n        this.state.input)\n      .then(response => this.displayFaceBox(this.calculateFaceLocation(response)))\n      .catch(err => console.log(err));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        \n        <Particles className='particles'\n              params={particlesOptions}\n        />\n        <Navigation />\n        <Logo />\n        <Rank />\n        <ImageLinkForm onInputChange={this.onInputChange} onButtonSubmit={this.onButtonSubmit}/>\n        <Celebrity name={this.state.name} value={this.state.value}/>\n        <FaceRecognition box={this.state.box} imageURL={this.state.imageURL}/>\n      </div>\n  );\n}\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}